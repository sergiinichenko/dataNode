Metadata-Version: 1.2
Name: datanodes
Version: 0.1.0
Summary: Python Boilerplate contains all the boilerplate you need to create a Python package.
Home-page: https://github.com/sergiinichenko/template
Author: Sergii Nichenko
Author-email: sergii.nichenko@gmail.com
License: MIT license
Description: <h1 align="center"> Welcome to Data-Nodes </h1>
        <p align="center"> 
          <img src="" alt="Data-Nodes logo" height="282px" width="637">
        </p>
        
        <!-- TABLE OF CONTENTS -->
        <details open="open">
          <summary>Table of Contents</summary>
          <ol>
            <li><a href="#about-the-project"> ➤ About The Project</a></li>
            <li><a href="#overview"> ➤ Overview</a></li>
            <li><a href="#getting-started"> ➤ Getting Started</a></li>
            <li><a href="#scenario1"> ➤ Scenario 1: Depth First Search </a></li>
            <li><a href="#credits"> ➤ Credits</a></li>
          </ol>
        </details>
        
        <!-- ABOUT THE PROJECT -->
        <h2 id="about-the-project"> :pencil: About The Project</h2>
        
        <p align="justify"> 
          For those of you not familiar with Pacman, it's a game where Pacman (the yellow circle with a mouth in the above figure) moves around in a maze and tries to eat as many food pellets (the small white dots) as possible, while avoiding the ghosts (the other two agents with eyes in the above figure). If Pacman eats all the food in a maze, it wins.
        </p>
        
        <!-- OVERVIEW -->
        <h2 id="overview"> :cloud: Overview</h2>
        
        <p align="justify"> 
          In this project, the Pacman agent will find paths through his maze world, both to reach a particular location and to collect food efficiently. I implemented general search algorithms such as depth-first, breadth-first, uniform cost, and A* search algorithms which are used to solve navigation problems in the Pacman world.
        </p>
        
        <!-- GETTING STARTED -->
        <h2 id="getting-started"> :book: Getting Started</h2>
        
        <p>You are able to start the game by typing the following commands in the command line:</p>
        <pre><code>$ python pacman.py</code></pre>
        
        <p>You can see the list of all options and their default values via:</p>
        <pre><code>$ python pacman.py -h</code></pre>
        <i>Note that all of the commands that appear in this project also appear in <code>commands.txt</code>, for easy copying and pasting.</i>
        
        <!-- SCENARIO1 -->
        <h2 id="scenario1"> :small_orange_diamond: Scenario 1: Finding a Fixed Food Dot using Depth First Search</h2>
        
        <p>I have implemented the depth-first search (DFS) algorithm in the depthFirstSearch function in <code>search.py</code>.</p>
        <p>The Pacman will quickly find a solution via running the following commands:</p>
        
        <pre><code>$ python pacman.py -l tinyMaze -p SearchAgent</code></pre>
        <pre><code>$ python pacman.py -l mediumMaze -p SearchAgent</code></pre>
        <pre><code>$ python pacman.py -l bigMaze -z .5 -p SearchAgent</code></pre>
        
        <p align="center"> 
        <img src="gif/DFS.gif" alt="Animated gif DFS Algorithm" height="282px" width="637px">
        <!--height="382px" width="737px"-->
        </p>
        
        <!-- CREDITS -->
        <h2 id="credits"> :scroll: Credits</h2>
        
        Mohammad Amin Shamshiri
        
        [![GitHub Badge](https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white)](https://github.com/ma-shamshiri)
        [![Twitter Badge](https://img.shields.io/badge/Twitter-1DA1F2?style=for-the-badge&logo=twitter&logoColor=white)](https://twitter.com/ma_shamshiri)
        [![LinkedIn Badge](https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white)](https://www.linkedin.com/in/ma-shamshiri)
        
        Acknowledgements: Based on UC Berkeley's Pacman AI project, <a href="http://ai.berkeley.edu">http://ai.berkeley.edu</a>
        
        
        =======
        History
        =======
        
        0.1.0 (2021-06-22)
        ------------------
        
        * First release as a library.
        
Keywords: datanodes
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.6
